/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Sept 12, 2020
*/

Question: 

Given a binary tree, return the preorder traversal of its nodes' values.

Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3
Output: [1,2,3]

Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
     
        List<Integer> preorderNodeVal = new ArrayList<>();
        if(root==null){
            return preorderNodeVal;
        }
        
        Stack<TreeNode> preorderDfsStack = new Stack<>();
        HashSet<TreeNode> helper = new HashSet<>();
        preorderDfsStack.push(root);
        
        while(!preorderDfsStack.empty()){
            
            TreeNode currNode = preorderDfsStack.pop(); 
            preorderNodeVal.add(currNode.val);
            helper.add(currNode);
            
            if(currNode.right!=null && !helper.contains(currNode.right)){
                preorderDfsStack.push(currNode.right);
                //continue;
            }
            
            if(currNode.left!=null && !helper.contains(currNode.left)){
                preorderDfsStack.push(currNode.left);
                //continue;
            }
        }
        
        
        return preorderNodeVal;   
    }
}
/*
Approach: Iterative (Root->Right->Left) DFS
Data Structure: Stack, HashSet
Time Complexity: Linear O(n) where n = total number of nodes in binary tree
Space Complexity: Linear O(n) where n = total number of nodes in binary tree
*/
