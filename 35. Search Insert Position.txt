/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 1, 2020
*/

Question: 
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.

Example 1:
Input: [1,3,5,6], 5
Output: 2

Example 2:
Input: [1,3,5,6], 2
Output: 1

Example 3:
Input: [1,3,5,6], 7
Output: 4

Example 4:
Input: [1,3,5,6], 0
Output: 0

Solution:

class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums.length==0)
            return 0;
        if(nums[0]>target)
            return 0;
        if(nums[nums.length-1]<target)
            return nums.length;
        
            
        return binarySearch(nums, target, 0, nums.length-1);
    }
    int binarySearch(int[] nums, int target, int start, int end){
   
        if(start==end && nums[start]==target)
            return start;
        if(start==end && nums[start]!=target){
            if(nums[start]<target && start+1<nums.length && target<nums[start+1])
                return start+1;
            else if(nums[start]>target && start-1>=0 && target>nums[start-1])
                return start;
        }
        int mid = (start+end)/2;
        if(nums[mid]==target)
            return mid;
        
        if(target<nums[mid]){
            if(mid==start)
                mid++;
            return binarySearch(nums, target, start, mid-1);
        }
            
        if(mid==end)
            mid--;
        return binarySearch(nums, target, mid+1, end);
            
    }
}
/*
task: to look for an element in a sorted non-duplicate element array and find the index.
if index not found, generate one after entering that target in the array

approach:
modified binary search

Time Complexity: linear O(logn)
Space Complexity: constant O(1)

*/