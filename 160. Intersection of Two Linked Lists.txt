/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 4, 2020
*/

Question: 
Write a program to find the node at which the intersection of two singly linked lists begins.

Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
 

Example 2:
Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
 

Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: null
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if(headA==null || headB==null)
            return null;
        ListNode intersectNode = null, tempA = headA, tempB = headB;
        int lengthA = 0, lengthB = 0;
        while(tempA!=null){
            tempA = tempA.next;
            lengthA++;
        }
        while(tempB!=null){
            tempB = tempB.next;
            lengthB++;
        }
        tempA = headA;
        tempB = headB;
        while(lengthB>lengthA){
            tempB = tempB.next;
            lengthB--;
        }
        while(lengthA>lengthB){
            tempA = tempA.next;
            lengthA--;
        }
        while(tempA != null && tempA!=tempB){
            tempA = tempA.next;
            tempB = tempB.next;
        }
        return tempA;
    }
}
/*
task: to find the intersection node of two linear singly linked list.
preferences: linear time and constant space complexity.

approach:
linearly traverse through both the lists one by one and count the length.
make required length adjustments and then incrementally travese through both the lists.
if at some point, the traversing iterators points to a common node, return the node.
else if both the lists get exhausted while traversing, return null at the end..

Time Complexity: linear O(n)
Space Complexity: constant O(1)
*/