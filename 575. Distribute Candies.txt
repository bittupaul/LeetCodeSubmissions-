/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Aug 17, 2020
*/

Question: 

You have n candies of different types, the ith candy is of type candies[i].
You want to distribute the candies equally between a sister and a brother so that each of them gets n / 2 candies (n is even). 
The sister loves to collect different types of candies, so you want to give her the maximum number of different types of candies.
Return the maximum number of different types of candies you can give to the sister.

Example 1:
Input: candies = [1,1,2,2,3,3]
Output: 3
Explanation:
There are three different kinds of candies (1, 2 and 3), and two candies for each kind.
Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. 
The sister has three different kinds of candies. 

Example 2:
Input: candies = [1,1,2,3]
Output: 2
Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. 
The sister has two different kinds of candies, the brother has only one kind of candies.

Example 3:
Input: candies = [1,1]
Output: 1

Example 4:
Input: candies = [1,11]
Output: 1

Example 5:
Input: candies = [2,2]
Output: 1
 
Constraints:
n == candies.length
2 <= n <= 10^4
n is even.
-10^5 <= candies[i] <= 10^5

Solution:

class Solution {
    public int distributeCandies(int[] candies) {
        LinkedHashMap<Integer, Integer> candyFreq = new LinkedHashMap<Integer, Integer>();
        for(int i=0;i<candies.length;i++){
            if(!candyFreq.containsKey(candies[i])){
                candyFreq.put(candies[i], 1);
            }
            else candyFreq.replace(candies[i], candyFreq.get(candies[i])+1);
        }
        if((candies.length/2)<=candyFreq.size())
            return candies.length/2;
        return candyFreq.size();
    }
}

/*
Task: Given an array of repeating elements, we want to split it into two so that one split contains maximum distinct elements.

approach: 
store each distinct element and its frequency in a hashmap.
if length(array)/2 is less than or equal to hashmap size, return length(array)/2
else return size of hashmap.

Time Complexity: Linear O(n)
Space Complexity: Linear O(n)
*/