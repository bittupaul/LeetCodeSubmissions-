/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 1, 2020
*/

Question: 
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: "III"
Output: 3
Example 2:

Input: "IV"
Output: 4
Example 3:

Input: "IX"
Output: 9
Example 4:

Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 5:

Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Solution:

class Solution {
    public int romanToInt(String s) {
        
        LinkedHashMap<Character, Integer> romanToIntVal = new LinkedHashMap<>();
        int decimalInteger = 0, i;
        
        romanToIntVal.put('I', (Integer)1);
        romanToIntVal.put('V', (Integer)5);
        romanToIntVal.put('X', (Integer)10);
        romanToIntVal.put('L', (Integer)50);
        romanToIntVal.put('C', (Integer)100);
        romanToIntVal.put('D', (Integer)500);
        romanToIntVal.put('M', (Integer)1000);
        
        //base condition
        if(s.length()==1)
            return (int)romanToIntVal.get(s.charAt(0));
        
        for(i=0;i<s.length()-1;i++){
            if(romanToIntVal.get(s.charAt(i))>=romanToIntVal.get(s.charAt(i+1)))
                decimalInteger += (int)romanToIntVal.get(s.charAt(i));
            else{
                decimalInteger += (int)romanToIntVal.get(s.charAt(i+1))-(int)romanToIntVal.get(s.charAt(i));
                i++;
            }
        }
        
        //edge case
        if(i<s.length() && romanToIntVal.get(s.charAt(i))<=romanToIntVal.get(s.charAt(i-1)))
            decimalInteger += romanToIntVal.get(s.charAt(i));
        
        return decimalInteger;
    }
}
/*
given a valid roman numeral, we need to find out the equivalent decimal integer number
roman numerals are expressed using 7 letters

approach:
base condition: only one character in roman numeral string

1. store all the valid roman letters into a hasmap with their corresponding int value
2. traverse through the roman number linearly and keep track of i th and i+1 th letter
if value of i th letter is greater than value of i+1 th letter, add value of i th letter in result and process from i+1 th letter further else add difference of values of i+1 th letter and i th letter and process from i+2 th letter further.
return the result

Time Complexity: linear O(n) where n = total characters in roman input
Space Complexity: constant O(1)

*/