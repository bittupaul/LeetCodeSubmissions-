/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 1, 2020
*/

Question: 
Invert Binary Tree


Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1



Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        TreeNode head = root;
        interchange(root);
        return head;
    }
    public static void interchange(TreeNode root){
        if(root==null)
            return;
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        temp = null;
        interchange(root.left);
        interchange(root.right);
    }
}
/*
approach:
task: invert a given binary tree
inversion: mirroring

sol:
start from the root and interchange references of left and right child
recursively do it for all the childs until we exhaust the tree
return root

Time Complexity: linear O(n)
Space Complexity: constant O(1)
*/