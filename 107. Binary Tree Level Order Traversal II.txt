/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 1, 2020
*/

Question: 
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> temp = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
        if(root==null)
            return result;
        
        int nodeCountInLevel = 1;
        TreeNode driverNode = null;
        List<Integer> temp2 = new ArrayList<>();
        Queue<TreeNode> bfsHelper = new LinkedList<>();

        bfsHelper.add(root);
        
        while(!bfsHelper.isEmpty()){
            
            driverNode = bfsHelper.poll();
            temp2.add(driverNode.val);
            
            if(driverNode.left!=null)
                bfsHelper.add(driverNode.left);
            if(driverNode.right!=null)
                bfsHelper.add(driverNode.right);
            
            nodeCountInLevel--;
            if(nodeCountInLevel==0){
                temp.add(temp2);
                temp2 = new ArrayList<>();
                nodeCountInLevel = bfsHelper.size();
            } 
        }
        
        for(int i=temp.size()-1;i>=0;i--){
            result.add(temp.get(i));
        }
        
        return result;
    }
}

/*
task: given the root of a binary tree, we need to find level order traversal sets bottom-up

approach:
use BFS to find level order traversal sets (lists)
reverse the list of lists in final list of lists

Time Complexity: linear O(n) where n = total nodes in input binary tree
Space Complexity: linear O(n)
*/