/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 2, 2020
*/

Question: 
Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:
Input: 1->1->2
Output: 1->2

Example 2:
Input: 1->1->2->3->3
Output: 1->2->3

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode headRef = head;
        while(head != null){
            if(head.next!=null && head.val == head.next.val){
                head.next = head.next.next;
            }
            else head = head.next;
        }
        return headRef;
    }
}

/*
task: to remove duplicates in a sorted linked list
key observation: list is sorted

approach:
start iterating from the head 
    if i th and i+1 th node values are different, move ahead by 1.
    else delete i+1 th node by making changes in next references 

Time Complexity: linear O(n) where n = total number of nodes in the input linked list 
Space Complexity: constant O(1)
*/
