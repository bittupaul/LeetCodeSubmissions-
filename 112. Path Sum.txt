/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 3, 2020
*/

Question: 
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null)
            return false;
        if(root!=null &&  root.left==null && root.right==null && sum-root.val==0)
            return true;
        
        boolean x,y;
        
        if(root.left!=null)
            x = hasPathSum(root.left, sum-root.val);
        else x = false;
        if(root.right!=null)
            y = hasPathSum(root.right, sum-root.val);
        else y = false;
        return  x||y;
    }
}
/*
task: to check if there exists a path from root to leaf whcih sums to a given value

approach: 
shoot dfs on root
and check if by the end of dfs traversal, remaining sum becomes zero
    if yes, return true
    else return false

Time Complexity: linear O(n) where n = total nodes in given binary tree
Space Complexity: linear O(n) [worst case: we get a skewed tree]
*/