/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Aug 18, 2020
*/

Question: 
Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:
Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL

Example 2:
Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || k==0)
            return head;
        
        int listLength = 0;
        ListNode temp = head;
        
        while(temp!=null){
            listLength++;
            temp = temp.next;
        }
        
        if(k>listLength)
            k=k%listLength;
        
        temp = head;
        for(int i=0;i<listLength-k-1;i++){
            temp = temp.next;
        }
        
        if(temp.next==null || k==listLength)
            return head;
        
        ListNode temp2 = temp.next, temp3 = temp.next;
        temp.next = null;
        while(temp2.next!=null){
            temp2 = temp2.next;
        }
        temp2.next = head;
        return temp3;
    }
}

/*
Task: To rotate the linked list to right by k positions

approach:
Find the length of the list, and split it into two parts of length (n-k) and k where n = total nodes in the linked list.
if k>n, change k = k%n before the split.
Connect the tail of the k-part list to the head of the (n-k) part.

Time Complexity: Linear O(n), n = total linked list nodes in the given linked list
Space Complexity: Constant O(1)

*/