/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 4, 2020
*/

Question: 
There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].
Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

Example 1:
Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110

Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.
The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.
 
Note:
1 <= costs.length <= 100
It is guaranteed that costs.length is even.
1 <= costs[i][0], costs[i][1] <= 1000

Solution:

class Solution {
    public int twoCitySchedCost(int[][] costs) {
        
        int[][] costWithDiff = new int[costs.length][3];
        for(int i=0;i<costs.length;i++){
            costWithDiff[i][0] = costs[i][0];
            costWithDiff[i][1] = costs[i][1];
            costWithDiff[i][2] = Math.max(costs[i][0], costs[i][1])-Math.min(costs[i][0], costs[i][1]);
        }
        
        Arrays.sort(costWithDiff, new Comparator<int[]>(){
            @Override
            public int compare(final int[] col1, final int col2[]){
                return col2[2]-col1[2];
            }
        });
        
        int countA = 0, countB = 0, sum=0, i;
        for(i=0;i<costWithDiff.length;i++){
            
            if(costWithDiff[i][0]<costWithDiff[i][1]){
                sum+=costWithDiff[i][0];
                countA++;
            }
            else{
                sum+=costWithDiff[i][1];
                countB++;
            }
            
            if(countA==costs.length/2 || countB==costs.length/2)
                break;
            
        }
        i++;
        
        while(countA!=costs.length/2){
            sum += costWithDiff[i][0];
            i++;
            countA++;
        }
        while(countB!=costs.length/2){
            sum += costWithDiff[i][1];
            i++;
            countB++;
        }
        
        return sum;
    }
}

/*
we have been given a 2d array consisting fare rates to cityA and cityB for 2N candidates.
we want to fly out N candidates in each city and minimize the total fare cost.

optimal strategy:
Fly those candidates first who have greater gap between cityA and cityB. i.e, choose the min city fare
keep picking such candidates until one of the two cities gets full with the desired number of candidates.
choose the other city for the remaining candidates.

Time Complexity: O(nlog(n)) where n = total candidates
space complexity: O(n)

*/