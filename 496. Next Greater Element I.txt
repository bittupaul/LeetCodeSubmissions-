/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Sept 12, 2020
*/

Question: 
You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.

Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.

Note:
All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.

Solution:

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        
        int i, j;
        boolean greaterFound, elementFound;
        int[] nextGreaters = new int[nums1.length];
        Stack<Integer> greaters = new Stack<>();
        
        i = 0;
        while(i<nums1.length){
            j = 0;
            greaterFound = false;
            elementFound = false;
            while(j<nums2.length){
                if(nums2[j]==nums1[i]){
                   elementFound = true; 
                }
                if(nums2[j]>nums1[i] && elementFound){
                    greaters.push(nums2[j]);
                    greaterFound = true;
                    j = nums2.length;
                }
                else j++;
            }
            if(!greaterFound){
                greaters.push(-1);
            }
            i++;
        }
        
        while(!greaters.empty()){
            nextGreaters[--i] = greaters.pop();
        }
        return nextGreaters;
    }
}



/*
Approach 1: Double iteation for element search of 1st array in 2nd one and then keeping track of the next greater element. If not found, -1 is returned for such element.

Time Complexity: O(m * n) where m = length of 1st array and n = length of 2nd array.
Space Complexity: Linear O(m) wheer m = length of 1st array
Data Structure used: Stack 
*/