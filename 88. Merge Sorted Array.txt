/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 2, 2020
*/

Question: 
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3
Output: [1,2,2,3,5,6]

Solution:

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        /*
        Time efficient approach
        
        if(m==0){
            for(int i=0;i<n;i++)
                nums1[i]=nums2[i];
            return;
        } 
        
        int i=0, j=0, k=0;
        
        int[] auxArray = new int[m+n];
        while(i<m && j<n){
            if(nums1[i]<=nums2[j]){
                auxArray[k]=nums1[i];
                i++;
            }
            else{
                auxArray[k]=nums2[j];  
                j++;
            } 
            k++;
        }
        while(i<m){
            auxArray[k]=nums1[i];
            i++;
            k++;
        }
        while(j<n){
            auxArray[k]=nums2[j];
            j++;
            k++;
        }
        for(i=0;i<m+n;i++)
            nums1[i] = auxArray[i];
            
        */
        
        //space efficient approach
        for(int i=0;i<n;i++){
            nums1[m+i]=nums2[i];
        }
        Arrays.sort(nums1);
    }
}
/*
task: given two sorted integer arrays, we need to merge the second in first preserving the sorted order
key notes: first array has enough space to accommodate all the elements of second array
key observation: the function returns nothing

space efficient approach:
from m+1th position, add all the elements in array 2 to array 1 linearly => O(n)
sort array 1

Time Complexity: [O(n) for merging out of order] + [O((m+n)log(m+n)) to sort array 1] = O((m+n)log(m+n))
Space Complexity: O(1)
m, n represents elements in array 1 and array 2

Time efficient approach:
create an auxillary array of size m+n
merge array 1 and array 2 in sorted fashion => O(m+n)
overwrite array 1 with auxillary array elements

Time Complexity: O(m+n)
Space Complexity: O(m+n)
*/
