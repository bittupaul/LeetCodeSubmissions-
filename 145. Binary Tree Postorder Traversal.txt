/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Sept 12, 2020
*/

Question: 

Given the root of a binary tree, return the postorder traversal of its nodes' values.

Follow up: Recursive solution is trivial, could you do it iteratively?

 Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [2,1]
 
Constraints:
The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
    List<Integer> postorderNodeVal = new ArrayList<>();
        if(root==null){
            return postorderNodeVal;
        }
        
        Stack<TreeNode> postorderDfsStack = new Stack<>();
        HashSet<TreeNode> helper = new HashSet<>();
        postorderDfsStack.push(root);
        
        while(!postorderDfsStack.empty()){
            
            TreeNode currNode = postorderDfsStack.peek(); 
            
            if(currNode.left!=null && !helper.contains(currNode.left)){
                postorderDfsStack.push(currNode.left);
                continue;
            }
            
            if(currNode.right!=null && !helper.contains(currNode.right)){
                postorderDfsStack.push(currNode.right);
                continue;
            }
            
            postorderNodeVal.add(currNode.val);
            helper.add(currNode);
            postorderDfsStack.pop();
                        
        }
        
        return postorderNodeVal;   
    }
}
/*
Approach: Iterative Postorder DFS
Data Structure: Stack, HashSet
Time Complexity: Linear O(n) where n = total number of nodes in binary tree
Space Complexity: Linear O(n) where n = total number of nodes in binary tree
*/
