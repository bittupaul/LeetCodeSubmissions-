/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 1, 2020
*/

Question: 
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
	Open brackets must be closed by the same type of brackets.
	Open brackets must be closed in the correct order.

Note that an empty string is also considered valid.

Example 1:
Input: "()"
Output: true

Example 2:
Input: "()[]{}"
Output: true

Example 3:
Input: "(]"
Output: false

Example 4:
Input: "([)]"
Output: false

Example 5:
Input: "{[]}"
Output: true

Solution:

class Solution {
    public boolean isValid(String s) {
        
        if(s.length()%2==1)
            return false;
        
        LinkedHashMap<Character, Integer> openBrackets = new LinkedHashMap<>();
        LinkedHashMap<Character, Integer> closeBrackets = new LinkedHashMap<>();
        Stack<Character> stack = new Stack<>();
        
        openBrackets.put('(', (Integer)1);
        openBrackets.put('{', (Integer)2);
        openBrackets.put('[', (Integer)3);
        closeBrackets.put(')', (Integer)1);
        closeBrackets.put('}', (Integer)2);
        closeBrackets.put(']', (Integer)3);
        
        for(int i=0;i<s.length();i++){
            
            if(stack.isEmpty() && closeBrackets.containsKey(s.charAt(i)))
                return false;
            
            if(!stack.isEmpty() && closeBrackets.containsKey(s.charAt(i))){
                if((int)openBrackets.get(stack.peek()) != (int)closeBrackets.get(s.charAt(i)))
                    return false;
                else stack.pop();
            }
            
            if(openBrackets.containsKey(s.charAt(i)))
                stack.push(s.charAt(i));
                
        }
        
        if(stack.isEmpty())
            return true;
        
        return false;
    }
}
/*
given a string of parentheses, we need to check if they are valid.
The definition of valid is:
    a. open brackets must be closed by the same corresponding type of bracket
    b. open brackets must be closed in the same order

base condition: if length of input string is odd -> return false

1. Create two(open, close) hashmaps and store the three types of brackets with a numeral value in them.

2. Use a stack and iterate through the string,
    if stack is empty and closing bracket is encountered -> return false
    if i th bracket is open bracket -> push it in stack
    if stack is non empty and stack top doesn't matches the i th closing bracket -> return false
    if stack is non empty and stack top matches the i th closing bracket -> pop stack

3. if stack is empty -> return true else return false

Time Complexity: linear O(n)
Space Complexity: constant O(1)
*/