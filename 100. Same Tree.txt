/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 2, 2020
*/

Question: 
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:
Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true

Example 2:
Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        
        if(p==null && q ==null)
            return true;
        if((p==null && q!=null) || (p!=null && q==null))
            return false;
        if(p.val == q.val)
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        return false;
    }
}

/*
task: to check if two binary trees are structurally identical and nodes have same value.

approach:
Shoot DFS traversal at the roots of both the binary trees and check equality in values for corresponding nodes.

Time Complexity: linear O(n) where n = min(x, y) and x, y are total nodes in both input binary trees respectively
Space Complexity: linear O(n) [worst case: stack space in skewed binary tree]
*/
