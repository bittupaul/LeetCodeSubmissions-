/*
@ Bittu Paul (www.github.com/bittupaul)
Date: Aug 18, 2020
*/

Question: 
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.
You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:
Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL

Example 2:
Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
 
Constraints:
The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...
The length of the linked list is between [0, 10^4].

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        
        if(head == null || head.next  == null || head.next.next == null)
            return head;
        
        ListNode oddHead = head;
        ListNode eveHead = head.next;
        ListNode temp = head, temp2 = head.next;
        
        while(temp!=null && temp2!=null && temp.next!=null && temp2.next!=null){
            temp.next = temp.next.next;
            temp2.next = temp2.next.next;
            temp = temp.next;
            temp2 = temp2.next;
        }
        temp.next = eveHead;
        return oddHead;
    }
}

/*
Task: To group together nodes at odd positions in one list and even positions in other and then merging them.

Approach: Alternate next and connect through linear iteration.
Time Complexity: Linear O(n) where n = total number of linked list elements
Space Complexity: Constant O(1)
*/