/*
@ Bittu Paul (www.github.com/bittupaul)
Date: June 6, 2020
*/

Question: 
Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.

Example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        
        if(root==null)
            return 0;
        if(root.left==null && root.right!=null)
            return 1+minDepth(root.right);
        else if(root.right==null && root.left!=null)
            return 1+minDepth(root.left);
        else if(root.left==null && root.right==null)
            return 1;
        return Math.min(1+minDepth(root.left), 1+minDepth(root.right));
        
    }
}
/*
task: to find the min depth of a binary tree
approach: dfs on root and recursively to every left and right child

Time Complexity: linear O(n)
Space Complexity: linear O(n)

*/